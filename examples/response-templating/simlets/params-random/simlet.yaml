#----------------------------------------------------------------------
# Simlet-specific configuration.
#----------------------------------------------------------------------

request:
- where: method
  equals: GET

- where: uriPath
  equals: "/api/places/nearby"

- where: uriQueryParameter
  named: "postalCode"
  equals: "34345"

- where: uriQueryParameter
  named: "radius"
  equals: "6"

- where: uriQueryParameter
  named: "types"
  equals: "food"


RateLimitResetParm:
  is: parameter
  from: dateTime
  range:
    min: 1
    max: 5
    timeUnit: hours

RateLimitRemaining:
  is: parameter
  from: number
  range:
    min: 0
    max: 100

CallbackToken:
  is: parameter
  from: token
  pattern: "[a-z]{1}[a-z0-9/-]{10}[a-z0-9]{1}"

# Parameter for a single element randomly picked from the list 
RegionAZ:
  is: parameter
  from: list
  list:
  - "us-central1-a"
  - "us-central1-b"
  - "us-central1-c"
  - "us-central1-f"
  # The same as 'pick: 1'
  pick: any

# The parameter is a list containing all elements randomly reordered! 
AvailableZones:
  is: parameter
  from: list
  list:
  - "us-central1-a"
  - "us-central1-b"
  - "us-central1-c"
  - "us-central1-f"
  # The same as 'pick: 4' (e.g. the total number of list items)
  pick: all

# The parameter is a sub-list containing 2 randomly picked elements 
FirstNameList:
  is: parameter
  from: list
  list: [ "Anna", "Bill", "Mark", "Sofia" ]
  pick: 2

# No 'pick' field => parameter's value is the whole list, _unchanged_
LastNameList:
  is: parameter
  from: list
  list: [ "Smith", "Johnson" ]


response:
  from: template
  template: Simula

  status: 200

  headers:
  - "Content-Type: application/text; charset=UTF-8"
  - "X-RateLimit-Remaining: ${ RateLimitRemaining }"
  - "X-RateLimit-Reset: ${ formatDateTime(RateLimitResetParm, 'yyyyMMddHHmmss', 'GMT') }"
  - "X-Callback-Token: ${ CallbackToken }"
  - "X-Region-AvailZone: ${ RegionAZ }"

  body: |+
    <% 
      for (i = 0; i < AvailableZones.size(); i++) {
        write ('"availZone' + (i + 1) + '": "' + AvailableZones[i] + '"\n')
      } 

      for (f = 0; f < FirstNameList.size(); f++) {
         write ('"first_name' + (f + 1) + '": "' + FirstNameList[f] + '"\n')
      }

      for (l = 0; l < LastNameList.size(); l++) {
         write ('"last_name' + (l + 1) + '": "' + LastNameList[l] + '"\n')
      }
    %>
