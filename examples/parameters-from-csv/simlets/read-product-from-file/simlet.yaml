#----------------------------------------------------------------------
# Simlet-specific configuration.
#----------------------------------------------------------------------


ProductID:
  is: parameter
  from: uriPathPattern
  pattern: "/v1.1/product/{ProductID}/**"

Color:
  is: parameter
  from: uriPathPattern
  pattern: "/v1.1/product/*/{Color}/*"

Size:
  is: parameter
  from: uriPathPattern
  pattern: "/v1.1/product/*/*/{Size}"

ProductData:
  is: parameter
  from: csv

  # The first row in the CSV file is expected to contain unique column names
  # with no spaces or special characters in the names other than underscore.
  # A column value that contains a comma or double quote(s) is to be surrounded 
  # by double quotes. Each double quote inside of a column value is to be escaped
  # with another double quote
  file: "${sim.path}/product-data.csv"

  # List of keys from parameters to use in querying the CSV data. 
  # A parameter as key may appear more than once in the list.
  # Parameter names must match the column names in the CSV file
  keys:
  - ProductID
  - Color
  - Size


request:
- method: GET

- where: uriPathPattern
  matches: "/v1.1/product/{id}/{color}/{size}"

  # Matcher that tests if the product data keyed by id,  
  # color, and size as they come in the request (!)
  # exists in the CSV data source
- where: parameter
  named: ProductData
  exists: true


response:
  from: template
  template: Simula
  
  status: 200
  
  headers:
  - "Content-Type: application/json; charset=UTF-8"

  body: `
{
  "product": {
    "id": "${ ProductData['ProductID'] }",
    "sku": "${ ProductData['SKU'] }",
    "name": "${ jsonEncode( ProductData['Name'] ) }",
    "category": "${ ProductData['Category'] }",
    "subCategory": "${ ProductData['Subcategory'] }",
    "color": "${ ProductData['Color'] }",
    "size": "${ ProductData['Size'] }",
    "orig_price": ${ ProductData['Original_Price'] },
    "sale_price": ${ ProductData['Sale_Price'] }
  }
}
`