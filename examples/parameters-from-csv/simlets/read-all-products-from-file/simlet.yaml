#----------------------------------------------------------------------
# Simlet-specific configuration.
#----------------------------------------------------------------------


# Parameter names must match the column names in the CSV file
ProductID:
  is: parameter
  from: uriPathPattern
  pattern: "/v1.1/product/{ProductID}/**"


# Parameter names must match the column names in the CSV file
Color:
  is: parameter
  from: uriPathPattern
  pattern: "/v1.1/product/*/{Color}"


ProductData:
  is: parameter
  from: csv

  # The first row in the CSV file is expected to contain unique column names
  # with no spaces or special characters in the names other than underscore.
  # A column value that contains a comma or double quote(s) is to be surrounded 
  # by double quotes. Each double quote inside of a column value is to be escaped
  # with another double quote
  file: "${sim.path}/product-data.csv"

  # List of keys from parameters to use in querying the CSV data. 
  # A parameter as key may appear more than once in the list.
  # Parameter names must match the column names in the CSV file
  keys:
  - ProductID
  - Color

  # pick: first | all
  # The parameter will contain the "first" matching row or "all" of them 
  # for the given key(s) as a single object or a list, respectively.
  # No matches results in null.
  # For backward compatibility, it defaults to "first". Added in v1.12
  pick: all


request:
- method: GET

- where: uriPathPattern
  matches: "/v1.1/product/{id}/{color}"

  # Matcher that tests if the product data keyed by id,  
  # color, and size as they come in the request (!)
  # exists in the CSV data source
- where: parameter
  named: ProductData
  exists: true


response:
  from: template
  template: Simula
  
  status: 200
  
  headers:
  - "Content-Type: application/json; charset=UTF-8"

  body: `
{
  "products": [<%
// Sorting isn't necessary but helps with getting a deterministic result in unit tests  
ProductData.sort { it.SKU }
count = 0;
for (Product : ProductData) { 
  if (count++ > 0) { write "," } %>
    {
      "id": "${ Product['ProductID'] }",
      "sku": "${ Product['SKU'] }",
      "name": "${ jsonEncode( Product['Name'] ) }",
      "category": "${ Product['Category'] }",
      "subCategory": "${ Product['Subcategory'] }",
      "color": "${ Product['Color'] }",
      "size": "${ Product['Size'] }",
      "orig_price": ${ Product['Original_Price'] },
      "sale_price": ${ Product['Sale_Price'] }
    }<% 
} %>
  ]
}
`