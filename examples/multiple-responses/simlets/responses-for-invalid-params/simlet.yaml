#
# Example for configuring multiple possible responses for the same simlet.
# The response returned is based on some additional condition being met.
#
# - missing required fromDate and toDate parameters:
# GET /api/some/report
#
# - fromDate is not a date:
# GET /api/some/report?fromDate=abc-123
#
# - fromDate is not a date in the expected format:
# GET /api/some/report?fromDate=20200101
#
# - fromDate is valid but toDate is missing:
# GET /api/some/report?fromDate=2020-01-01
#
# - toDate is valid but fromDate is missing:
# GET /api/some/report?toDate=2020-01-31
#
# - both fromDate and toDate are present and valid:
# GET /api/some/report?fromDate=2020-01-01&toDate=2020-01-31
#
simlet: responses-for-invalid-parms


request:
- uriPath: /api/some/report
- method: GET


# A Query String Parameter is a collection, not a single value.
# Thus, converting to 'dateTime[]' and not simple 'dateTime' type
ParmFromDate:
  is: parameter
  from: uriQueryParameter
  named: fromDate
  as: dateTime[]
  format: "yyyy-MM-dd"

ParmToDate:
  is: parameter
  from: uriQueryParameter
  named: toDate
  as: dateTime[]
  format: "yyyy-MM-dd"


responses:
- when:
    request:
    - where: parameter
      named: ParmFromDate
      exists: false
  # then
  from: stub
  status: 400
  body: `
{
    "status": "error",
    "message": "Missing required date parameter 'fromDate' in 'yyyy-MM-dd' format"
}
`

- when:
    request:
    - where: parameter
      named: ParmToDate
      exists: false
  # then
  from: stub
  template: Simula
  status: 400
  body: `
{
    "status": "error",
    "message": "Missing required date parameter 'toDate' in 'yyyy-MM-dd' format"
}
`

  # otherwise
- from: template
  template: Simula
  status: 200
  headers:
  - "Content-Type: application/json"
  body: `
{
    "status": "OK",
    "message": "Received request with required parameters fromDate='${_request.uri.query.params.first('fromDate')}' and toDate='${_request.uri.query.params.first('toDate')}'"
}
`
#---